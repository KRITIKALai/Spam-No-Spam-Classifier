# -*- coding: utf-8 -*-
"""spam filter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qmM576uQIV9TK4CCbUEToEI9-Le7Asq6

#First Method:

In this we use count vectorizer method from sklearn library.
"""

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

file_id = '11CsLTQRaV7QusmP2k7x55uXQsdrLV1ky' #https://drive.google.com/open?id=11CsLTQRaV7QusmP2k7x55uXQsdrLV1ky
downloaded = drive.CreateFile({'id': file_id})
print('Downloaded content "{}"'.format(downloaded.GetContentString()))

downloaded.GetContentFile('spamclassifier.txt')

df=pd.read_csv('spamclassifier.txt',sep='\t',names=['Status','Message'])

df.head()

df.loc[df["Status"] == 'ham',"Status",] = 1
df.loc[df["Status"] == 'spam',"Status",] = 0

df.head()

df_x = df['Message']
df_y = df['Status']
cv = CountVectorizer()

x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size = 0.25, random_state = 4)

x_train.head()

x_train_new = (cv.transform(x_train)).toarray() 
x_test_new = (cv.transform(x_test)).toarray()

print(df.shape)
print(x_train_new.shape)
print(x_test_new.shape)

cv.inverse_transform(x_train_new[0])

x_train_new[0]

mnb = MultinomialNB()

mnb.fit(x_train_new, y_train.astype('int'))

predictions = mnb.predict(x_test_new)

count = 0
pred = np.array(predictions)
actual = np.array(y_test.astype('int'))
for pr, act in zip(pred, actual):
  if pr == act:
    count += 1

acc = (count/len(pred))*100

print("accuracy of my first model is: ", acc)

"""#Second Method:

In this we use **TF-IDF** method. This is easily available in **SKLearns ' s feature_extraction.text**  module.

TF - IDF stands for Term Frequency - Inverse Document Frequency.

frequency of a term = term_frequency / document frequency
"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

X_train_new = (tfidf.fit_transform(x_train)).toarray()
X_test_new = (tfidf.transform(x_test)).toarray()

tfidf.inverse_transform(X_train_new[0])

X_train_new[0]

mnb_new = MultinomialNB()

mnb_new.fit(X_train_new, y_train.astype('int'))

pred = mnb_new.predict(X_test_new)

count = 0
for a,b in zip(pred, y_test):
  if a==b:
    count += 1

acc_new = (count/len(pred))*100

print("accuracy of my second model is: ", acc_new)

